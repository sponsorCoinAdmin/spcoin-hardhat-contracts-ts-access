/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SpCoinDataTypes {
  export type StakingTransactionStructStruct = {
    insertionTime: PromiseOrValue<BigNumberish>;
    stakingRewards: PromiseOrValue<BigNumberish>;
    sourceList: PromiseOrValue<string>[];
  };

  export type StakingTransactionStructStructOutput = [
    BigNumber,
    BigNumber,
    string[]
  ] & {
    insertionTime: BigNumber;
    stakingRewards: BigNumber;
    sourceList: string[];
  };
}

export interface SPCoinInterface extends utils.Interface {
  functions: {
    "addAgent(address,uint256,address)": FunctionFragment;
    "addBackDatedSponsorship(address,uint256,address,uint256,string,string,uint256)": FunctionFragment;
    "addRecipient(address)": FunctionFragment;
    "addSponsor(address)": FunctionFragment;
    "addSponsorship(address,uint256,address,uint256,string,string)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "annualInflation()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateStakingRewards(uint256,uint256,uint256,uint256)": FunctionFragment;
    "creationTime()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deleteAccountFromMaster(address)": FunctionFragment;
    "deleteAccountRecord(address)": FunctionFragment;
    "depositStakingRewards(uint256,address,address,uint256,address,uint256,uint256)": FunctionFragment;
    "getAccountList()": FunctionFragment;
    "getAccountRecipientList(address)": FunctionFragment;
    "getAgentRateList(address,address,uint256,address)": FunctionFragment;
    "getAgentTotalRecipient(address,address,uint256,address)": FunctionFragment;
    "getRateTransactionStr((uint256,uint256,address[])[])": FunctionFragment;
    "getRecipientRateAgentList(address,address,uint256)": FunctionFragment;
    "getRecipientRateList(address,address)": FunctionFragment;
    "getRecipientRateTransactionList(address,address,uint256)": FunctionFragment;
    "getRewardAccounts(address,uint256)": FunctionFragment;
    "getSerializedAccountRecord(address)": FunctionFragment;
    "getSerializedAccountRewards(address)": FunctionFragment;
    "getSerializedRateTransactionList(address,address,uint256,address,uint256)": FunctionFragment;
    "getSerializedRecipientRateList(address,address,uint256)": FunctionFragment;
    "getSerializedRecipientRecordList(address,address)": FunctionFragment;
    "getSerializedSPCoinHeader()": FunctionFragment;
    "initialTotalSupply()": FunctionFragment;
    "isAccountInserted(address)": FunctionFragment;
    "masterAccountList(uint256)": FunctionFragment;
    "msgSender()": FunctionFragment;
    "name()": FunctionFragment;
    "serializeAgentRateRecordStr(address,address,uint256,address,uint256)": FunctionFragment;
    "strToUint(string)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalanceOf()": FunctionFragment;
    "totalStakedSPCoins()": FunctionFragment;
    "totalStakingRewards()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unSponsorRecipient(address)": FunctionFragment;
    "updateAccountStakingRewards(address)": FunctionFragment;
    "updateAgentAccountRewards(address)": FunctionFragment;
    "updateRecipietAccountRewards(address)": FunctionFragment;
    "updateSponsorAccountRewards(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAgent"
      | "addBackDatedSponsorship"
      | "addRecipient"
      | "addSponsor"
      | "addSponsorship"
      | "allowance"
      | "annualInflation"
      | "approve"
      | "balanceOf"
      | "calculateStakingRewards"
      | "creationTime"
      | "decimals"
      | "deleteAccountFromMaster"
      | "deleteAccountRecord"
      | "depositStakingRewards"
      | "getAccountList"
      | "getAccountRecipientList"
      | "getAgentRateList"
      | "getAgentTotalRecipient"
      | "getRateTransactionStr"
      | "getRecipientRateAgentList"
      | "getRecipientRateList"
      | "getRecipientRateTransactionList"
      | "getRewardAccounts"
      | "getSerializedAccountRecord"
      | "getSerializedAccountRewards"
      | "getSerializedRateTransactionList"
      | "getSerializedRecipientRateList"
      | "getSerializedRecipientRecordList"
      | "getSerializedSPCoinHeader"
      | "initialTotalSupply"
      | "isAccountInserted"
      | "masterAccountList"
      | "msgSender"
      | "name"
      | "serializeAgentRateRecordStr"
      | "strToUint"
      | "symbol"
      | "totalBalanceOf"
      | "totalStakedSPCoins"
      | "totalStakingRewards"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unSponsorRecipient"
      | "updateAccountStakingRewards"
      | "updateAgentAccountRewards"
      | "updateRecipietAccountRewards"
      | "updateSponsorAccountRewards"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAgent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addBackDatedSponsorship",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSponsor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSponsorship",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "annualInflation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakingRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteAccountFromMaster",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAccountRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStakingRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountRecipientList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentRateList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentTotalRecipient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateTransactionStr",
    values: [SpCoinDataTypes.StakingTransactionStructStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientRateAgentList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientRateList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientRateTransactionList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAccounts",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerializedAccountRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerializedAccountRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerializedRateTransactionList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerializedRecipientRateList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerializedRecipientRecordList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerializedSPCoinHeader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountInserted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterAccountList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "serializeAgentRateRecordStr",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "strToUint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalanceOf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedSPCoins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unSponsorRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccountStakingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgentAccountRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecipietAccountRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSponsorAccountRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBackDatedSponsorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSponsor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSponsorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "annualInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAccountFromMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAccountRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountRecipientList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentRateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentTotalRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateTransactionStr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientRateAgentList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientRateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientRateTransactionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerializedAccountRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerializedAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerializedRateTransactionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerializedRecipientRateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerializedRecipientRecordList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerializedSPCoinHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountInserted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterAccountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serializeAgentRateRecordStr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strToUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedSPCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unSponsorRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecipietAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSponsorAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SPCoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SPCoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAgent(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBackDatedSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSponsor(
      sponsor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    annualInflation(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateStakingRewards(
      _stakedSPCoins: PromiseOrValue<BigNumberish>,
      _lastUpdateTime: PromiseOrValue<BigNumberish>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteAccountFromMaster(
      _accountKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositStakingRewards(
      _accountType: PromiseOrValue<BigNumberish>,
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRate: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountList(overrides?: CallOverrides): Promise<[string[]]>;

    getAccountRecipientList(
      _sponsorKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAgentRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAgentTotalRecipient(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRateTransactionStr(
      transactionList: SpCoinDataTypes.StakingTransactionStructStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecipientRateAgentList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRecipientRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRewardAccounts(
      _accountKey: PromiseOrValue<string>,
      _rewardType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { memoryRewards: string }>;

    getSerializedAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSerializedAccountRewards(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSerializedRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSerializedRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSerializedRecipientRecordList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSerializedSPCoinHeader(
      overrides?: CallOverrides
    ): Promise<[string] & { seralized: string }>;

    initialTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAccountInserted(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterAccountList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    msgSender(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    serializeAgentRateRecordStr(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    strToUint(
      _strWholeAmount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { result: BigNumber; err: boolean }>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBalanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedSPCoins(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unSponsorRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAccountStakingRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAgentAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRecipietAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSponsorAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  addAgent(
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBackDatedSponsorship(
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    _agentRateKey: PromiseOrValue<BigNumberish>,
    _strWholeAmount: PromiseOrValue<string>,
    _strDecimalAmount: PromiseOrValue<string>,
    _transactionTimeStamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRecipient(
    _recipientKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSponsor(
    sponsor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSponsorship(
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    _agentRateKey: PromiseOrValue<BigNumberish>,
    _strWholeAmount: PromiseOrValue<string>,
    _strDecimalAmount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  annualInflation(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    _spender: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateStakingRewards(
    _stakedSPCoins: PromiseOrValue<BigNumberish>,
    _lastUpdateTime: PromiseOrValue<BigNumberish>,
    _transactionTimeStamp: PromiseOrValue<BigNumberish>,
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  deleteAccountFromMaster(
    _accountKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteAccountRecord(
    _accountKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositStakingRewards(
    _accountType: PromiseOrValue<BigNumberish>,
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRate: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    _agentRate: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountList(overrides?: CallOverrides): Promise<string[]>;

  getAccountRecipientList(
    _sponsorKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAgentRateList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAgentTotalRecipient(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRateTransactionStr(
    transactionList: SpCoinDataTypes.StakingTransactionStructStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  getRecipientRateAgentList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRecipientRateList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRecipientRateTransactionList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRewardAccounts(
    _accountKey: PromiseOrValue<string>,
    _rewardType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerializedAccountRecord(
    _accountKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerializedAccountRewards(
    _accountKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerializedRateTransactionList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    _agentRateKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerializedRecipientRateList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerializedRecipientRecordList(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerializedSPCoinHeader(overrides?: CallOverrides): Promise<string>;

  initialTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  isAccountInserted(
    _accountKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterAccountList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  msgSender(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  serializeAgentRateRecordStr(
    _sponsorKey: PromiseOrValue<string>,
    _recipientKey: PromiseOrValue<string>,
    _recipientRateKey: PromiseOrValue<BigNumberish>,
    _agentKey: PromiseOrValue<string>,
    _agentRateKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  strToUint(
    _strWholeAmount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { result: BigNumber; err: boolean }>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedSPCoins(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unSponsorRecipient(
    _recipientKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAccountStakingRewards(
    _sourceKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAgentAccountRewards(
    _sourceKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRecipietAccountRewards(
    _sourceKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSponsorAccountRewards(
    _sourceKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAgent(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addBackDatedSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSponsor(
      sponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    annualInflation(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakingRewards(
      _stakedSPCoins: PromiseOrValue<BigNumberish>,
      _lastUpdateTime: PromiseOrValue<BigNumberish>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAccountFromMaster(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositStakingRewards(
      _accountType: PromiseOrValue<BigNumberish>,
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRate: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountList(overrides?: CallOverrides): Promise<string[]>;

    getAccountRecipientList(
      _sponsorKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAgentRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAgentTotalRecipient(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateTransactionStr(
      transactionList: SpCoinDataTypes.StakingTransactionStructStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    getRecipientRateAgentList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRecipientRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRewardAccounts(
      _accountKey: PromiseOrValue<string>,
      _rewardType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerializedAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerializedAccountRewards(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerializedRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerializedRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerializedRecipientRecordList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerializedSPCoinHeader(overrides?: CallOverrides): Promise<string>;

    initialTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountInserted(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterAccountList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    msgSender(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    serializeAgentRateRecordStr(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    strToUint(
      _strWholeAmount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { result: BigNumber; err: boolean }>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedSPCoins(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unSponsorRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccountStakingRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAgentAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateRecipietAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSponsorAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    addAgent(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBackDatedSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSponsor(
      sponsor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    annualInflation(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakingRewards(
      _stakedSPCoins: PromiseOrValue<BigNumberish>,
      _lastUpdateTime: PromiseOrValue<BigNumberish>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAccountFromMaster(
      _accountKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositStakingRewards(
      _accountType: PromiseOrValue<BigNumberish>,
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRate: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountList(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountRecipientList(
      _sponsorKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgentRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgentTotalRecipient(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateTransactionStr(
      transactionList: SpCoinDataTypes.StakingTransactionStructStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientRateAgentList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAccounts(
      _accountKey: PromiseOrValue<string>,
      _rewardType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerializedAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerializedAccountRewards(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerializedRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerializedRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerializedRecipientRecordList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerializedSPCoinHeader(overrides?: CallOverrides): Promise<BigNumber>;

    initialTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountInserted(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterAccountList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    msgSender(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    serializeAgentRateRecordStr(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strToUint(
      _strWholeAmount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedSPCoins(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unSponsorRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAccountStakingRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAgentAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRecipietAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSponsorAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAgent(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBackDatedSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSponsor(
      sponsor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSponsorship(
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      _strWholeAmount: PromiseOrValue<string>,
      _strDecimalAmount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    annualInflation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateStakingRewards(
      _stakedSPCoins: PromiseOrValue<BigNumberish>,
      _lastUpdateTime: PromiseOrValue<BigNumberish>,
      _transactionTimeStamp: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAccountFromMaster(
      _accountKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositStakingRewards(
      _accountType: PromiseOrValue<BigNumberish>,
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRate: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountRecipientList(
      _sponsorKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgentRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgentTotalRecipient(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateTransactionStr(
      transactionList: SpCoinDataTypes.StakingTransactionStructStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientRateAgentList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAccounts(
      _accountKey: PromiseOrValue<string>,
      _rewardType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerializedAccountRecord(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerializedAccountRewards(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerializedRateTransactionList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerializedRecipientRateList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerializedRecipientRecordList(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerializedSPCoinHeader(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountInserted(
      _accountKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterAccountList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    msgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    serializeAgentRateRecordStr(
      _sponsorKey: PromiseOrValue<string>,
      _recipientKey: PromiseOrValue<string>,
      _recipientRateKey: PromiseOrValue<BigNumberish>,
      _agentKey: PromiseOrValue<string>,
      _agentRateKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strToUint(
      _strWholeAmount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedSPCoins(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakingRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unSponsorRecipient(
      _recipientKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAccountStakingRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAgentAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRecipietAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSponsorAccountRewards(
      _sourceKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
