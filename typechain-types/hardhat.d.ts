/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Account__factory>;
    getContractFactory(
      name: "Agent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Agent__factory>;
    getContractFactory(
      name: "AgentRates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentRates__factory>;
    getContractFactory(
      name: "Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Recipient__factory>;
    getContractFactory(
      name: "RecipientRates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecipientRates__factory>;
    getContractFactory(
      name: "Sponsor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sponsor__factory>;
    getContractFactory(
      name: "Transactions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transactions__factory>;
    getContractFactory(
      name: "UnSubscribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnSubscribe__factory>;
    getContractFactory(
      name: "KYC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KYC__factory>;
    getContractFactory(
      name: "SpCoinDataTypes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpCoinDataTypes__factory>;
    getContractFactory(
      name: "RewardsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsManager__factory>;
    getContractFactory(
      name: "StakingManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingManager__factory>;
    getContractFactory(
      name: "SPCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SPCoin__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "Security",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Security__factory>;
    getContractFactory(
      name: "StringUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StringUtils__factory>;
    getContractFactory(
      name: "StructSerialization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StructSerialization__factory>;
    getContractFactory(
      name: "TimeUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeUtils__factory>;
    getContractFactory(
      name: "Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utils__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;

    getContractAt(
      name: "Account",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Account>;
    getContractAt(
      name: "Agent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Agent>;
    getContractAt(
      name: "AgentRates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentRates>;
    getContractAt(
      name: "Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Recipient>;
    getContractAt(
      name: "RecipientRates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RecipientRates>;
    getContractAt(
      name: "Sponsor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sponsor>;
    getContractAt(
      name: "Transactions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Transactions>;
    getContractAt(
      name: "UnSubscribe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnSubscribe>;
    getContractAt(
      name: "KYC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KYC>;
    getContractAt(
      name: "SpCoinDataTypes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpCoinDataTypes>;
    getContractAt(
      name: "RewardsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsManager>;
    getContractAt(
      name: "StakingManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingManager>;
    getContractAt(
      name: "SPCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SPCoin>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "Security",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Security>;
    getContractAt(
      name: "StringUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StringUtils>;
    getContractAt(
      name: "StructSerialization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StructSerialization>;
    getContractAt(
      name: "TimeUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeUtils>;
    getContractAt(
      name: "Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Utils>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
