class HHAccountStruct {
  constructor()
  {
       this.burnAddress = "0x0000000000000000000000000000000000000000";
       this.signers;
       this.accounts;
       this.rates = [0,1,2,3,4,5,6,7,8,9,10];
  }
};

const initHHAccounts = async ( ) => {
  signers = await ethers.getSigners();
  let hhTestAccountElements = new HHAccountStruct();
  let accounts = [];
  signers.forEach((signer, i) => {
       signer.address = signer.address.toLowerCase();
       accounts.push(signer.address);
  });

  hhTestAccountElements.signers = signers;
  hhTestAccountElements.accounts = accounts; 
  return hhTestAccountElements;
};

class HhClassMethods {
  constructor() {
    this.SPONSOR_ACCOUNT_SIGNERS;
    this.SPONSOR_ACCOUNT_KEYS;
    this.TRANSACTION_QTY;
    this.BURN_ACCOUNT;
  }

  getHHTestAccounts = async (_recipientKey) => {
    hhTestElements = await initHHAccounts();
    return hhTestElements;
  }

  initSPCoinHHTest = async () => {
    const hhTestElements = await initHHAccounts();
    console.log(`hhTestElements = ${JSON.stringify(hhTestElements)}`)
    this.SPONSOR_ACCOUNT_SIGNERS = hhTestElements.signers;
    this.SPONSOR_ACCOUNT_KEYS = this.RECIPIENT_ACCOUNT_KEYS = this.AGENT_ACCOUNT_KEYS = hhTestElements.accounts;
    this.TRANSACTION_QTY = this.RECIPIENT_RATES = this.AGENT_RATES = hhTestElements.rates;
    this.BURN_ACCOUNT = hhTestElements.burnAddress;
  }

  dump = () => {
    console.log('CLASS HhClassMethods() DUMP}')
    console.log(`SPONSOR_ACCOUNT_SIGNERS = ${this.SPONSOR_ACCOUNT_SIGNERS}`)
    console.log(`SPONSOR_ACCOUNT_KEYS = ${this.SPONSOR_ACCOUNT_KEYS}`)
    console.log(`TRANSACTION_QTY = ${this.TRANSACTION_QTY}`)
    console.log(`BURN_ACCOUNT = ${this.BURN_ACCOUNT}`)
  }
 
}



module.exports = {
  HhClassMethods
}